"""  
Lambda function handler for processing PDF invoices and receipts using Amazon Textract.

This function is triggered by the upload of a PDF invoice or receipt to an S3 bucket. It initiates
an asynchronous analysis of the document using Amazon Textract's AnalyzeExpense operation. Once the
analysis is complete, the resulting JSON response is saved to another S3 bucket. 
"""
import json
import time
import boto3
import logging

# Configure logging level
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger()

def lambda_handler(event, context):
    """
    Lambda function handler
    Parameters:
    - event (dict): A dictionary containing information about the event that triggered the function.
                    In this case, it contains details about the uploaded file in the S3 bucket.
    - context (LambdaContext): An object containing runtime information for the Lambda function.

    Returns:
    - dict: A dictionary containing the HTTP status code and the JSON response generated by Textract.

    Raises:
    - Exception: If Textract processing fails or if the maximum wait time for processing is exceeded.

    Note:
    - The function uses the start_expense_analysis method to initiate the analysis asynchronously.
    - It periodically checks the status of the analysis using the get_expense_analysis method.
    - Once the analysis is successful, the JSON response is saved to the designated S3 bucket.
    - A timeout mechanism is implemented to prevent waiting indefinitely for Textract processing. 
    """

    # Retrieve the S3 bucket name and object key from the event
    bucket_name = event['Records'][0]['s3']['bucket']['name'] #extracts the name of the S3 bucket from the event data.
    object_key = event['Records'][0]['s3']['object']['key'] #extracts the key (i.e., the path) of the object (file) that triggered the event.
    
    # Extract filename from the object key
    filename = object_key.split('/')[-1] #[-1]: index is used to access the last element of the list returned by the split()

    # Initialize the Textract client
    textract_client = boto3.client('textract')
    
    try:
        # Invoke Textract's start_expense_analysis method on the uploaded PDF
        response = textract_client.start_expense_analysis(
            DocumentLocation={
                'S3Object': {
                    'Bucket': bucket_name,
                    'Name': object_key
                }
            }
            #OutputConfig={'S3Bucket': 'ccwebapp-textract-json',},# parameter speciffies s3 bucket to store any output artifacts 
        )
        # Retrieve the job ID from the start response
        job_id = response['JobId']
    except: Exception as e:
        logger.error(f"Failed to start expense analysis for {object_key} in {bucket_name}: {str(e)}")
        raise Exception(f"Failed to start expense analysis: {str(e)}")


    # Maximum time to wait for Textract processing completion (in seconds)
    max_wait_time = 300  # maximum time to wait for Textract processing to complete.
    start_time = time.time() # keep track of time before entering the loop.      

    # Wait for Textract to process the document and retrieve the JSON response
    while True:
        # Check if the elapsed time exceeds the maximum wait time
        if time.time() - start_time > max_wait_time:
            raise Exception('Timeout: Textract processing took too long')

        # Check Textract job status and break loop if processing is complete
        response = textract_client.get_expense_analysis(JobId=job_id)
        status = response['JobStatus']
        if status == 'SUCCEEDED':
            # If the analysis is successful, retrieve the results
            textract_result = response
            break
        elif status == 'FAILED':
            #If the analysis fails, raise an exception.
            raise Exception('Textract processing failed')
        
        # Sleep for a short duration before checking again to avoid excessive API calls
        time.sleep(2)  # Adjust sleep duration as needed

    # Extract the JSON response from the Textract Dictionary result
    json_response = json.dumps(textract_result)
    
    # Save the JSON response to the designated S3 bucket
    s3_client = boto3.client('s3')
    s3_client.put_object(
        Bucket='ccwebapp-textract-json',
        Key=f'{filename}.json',
        Body=json_response
    )
    
    return {
        'statusCode': 200,
        'body': json_response
    }